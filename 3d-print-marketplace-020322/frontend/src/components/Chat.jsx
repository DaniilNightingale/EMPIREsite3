import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { FaPaperPlane, FaUser, FaUserShield, FaUserCog, FaSmile, FaBars, FaTimes } from 'react-icons/fa';

const Chat = ({ targetUserId = null, orderContext = null }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showUserList, setShowUserList] = useState(false);
  const messagesEndRef = useRef(null);

  const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
  const isAdmin = currentUser.id === 1;

  const emojis = ['üòä', 'üòÇ', 'üòç', 'üëç', 'üëé', '‚ù§Ô∏è', 'üî•', 'üéâ', 'üò¢', 'üò°', 'ü§î', 'üëè'];

  useEffect(() => {
    if (isAdmin) {
      loadUsers();
    } else if (targetUserId) {
      setSelectedUser({ id: targetUserId, username: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', role: 'admin' });
    } else {
      setSelectedUser({ id: 1, username: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', role: 'admin' });
    }
  }, [targetUserId, isAdmin]);

  useEffect(() => {
    if (selectedUser) {
      console.log('Selected user changed, loading messages for:', selectedUser);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ localStorage
      const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
      const savedMessages = localStorage.getItem(savedMessagesKey);
      
      if (savedMessages) {
        try {
          const parsedMessages = JSON.parse(savedMessages);
          setMessages(parsedMessages);
          console.log('Loaded cached messages:', parsedMessages.length);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
          setMessages([]);
        }
      } else {
        setMessages([]);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const timer = setTimeout(() => {
        fetchMessages();
      }, 100);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω orderContext
      if (orderContext) {
        setNewMessage(`–ó–∞–∫–∞–∑ #${orderContext}: `);
      }
      
      return () => clearTimeout(timer);
    }
  }, [selectedUser, orderContext]);

  // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π messages
  useEffect(() => {
    console.log('Messages state updated:', {
      length: messages.length,
      messages: messages,
      selectedUser: selectedUser?.id,
      loading: loading
    });
  }, [messages, selectedUser, loading]);

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const loadUsers = async () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—ã–π API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const response = await axios.get('/api/users', {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞:', response.data);
      
      if (response.data && Array.isArray(response.data)) {
        const filteredUsers = response.data.filter(user => 
          user.id !== currentUser.id && user.id && user.username
        );
        console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', filteredUsers.length);
        setUsers(filteredUsers);
      } else {
        console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', response.data);
        setUsers([]);
      }
    } catch (error) {
      console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —á–∞—Ç–∞:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status
      });
      
      // Fallback - –ø—Ä–æ–±—É–µ–º admin API –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      try {
        console.log('–ü—Ä–æ–±—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π API...');
        const fallbackResponse = await axios.get('/api/admin/users', {
          timeout: 10000,
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (fallbackResponse.data && Array.isArray(fallbackResponse.data)) {
          const filteredUsers = fallbackResponse.data.filter(user => 
            user.id !== currentUser.id && user.id && user.username
          );
          console.log('–ê–¥–º–∏–Ω—Å–∫–∏–π API - –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', filteredUsers.length);
          setUsers(filteredUsers);
        } else {
          console.warn('–ê–¥–º–∏–Ω—Å–∫–∏–π API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          setUsers([]);
        }
      } catch (fallbackError) {
        console.error('–ê–¥–º–∏–Ω—Å–∫–∏–π API —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è:', fallbackError);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ undefined
        setUsers([]);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const fetchMessages = async () => {
    if (!selectedUser) {
      console.warn('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      return;
    }

    try {
      setLoading(true);
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', selectedUser);
      let loadedMessages = [];
      
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π API —á–∞—Ç–∞
      const response = await axios.get(`/api/chat/messages`, {
        params: {
          user_id: currentUser.id,
          with_user_id: selectedUser.id,
          limit: 100
        },
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      console.log('–û—Ç–≤–µ—Ç API —Å–æ–æ–±—â–µ–Ω–∏–π:', response.data);
      
      if (response.data && Array.isArray(response.data)) {
        loadedMessages = response.data.filter(msg => 
          msg && (msg.id || msg.message) // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        );
      } else {
        console.warn('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', response.data);
        loadedMessages = [];
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const normalizedMessages = loadedMessages.map(msg => ({
        id: msg.id || `msg_${Date.now()}_${Math.random()}`,
        content: msg.message || msg.content || '',
        created_at: msg.created_date || msg.created_at || new Date().toISOString(),
        sender_id: msg.from_user_id || msg.sender_id || 0,
        receiver_id: msg.to_user_id || msg.receiver_id || 0,
        sender_name: msg.from_username || msg.sender_name || 
          (msg.from_user_id === currentUser.id ? currentUser.username : selectedUser.username)
      })).sort((a, b) => 
        new Date(a.created_at) - new Date(b.created_at)
      );
      
      console.log('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', normalizedMessages.length);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setMessages(normalizedMessages);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
      const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
      try {
        localStorage.setItem(savedMessagesKey, JSON.stringify(normalizedMessages));
      } catch (storageError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage:', storageError);
      }
      
    } catch (error) {
      console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        selectedUser: selectedUser
      });
      
      // –ü—Ä–æ—Å—Ç–æ–π fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
      const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
      try {
        const cached = localStorage.getItem(savedMessagesKey);
        if (cached) {
          const cachedMessages = JSON.parse(cached);
          console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', cachedMessages.length);
          setMessages(cachedMessages);
        } else {
          console.log('–ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
          setMessages([]);
        }
      } catch (cacheError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', cacheError);
        setMessages([]);
      }
    } finally {
      setLoading(false);
    }
  };

  const sendMessage = async (e) => {
    e.preventDefault();
    
    if (!newMessage.trim() || !selectedUser) return;

    const messageText = newMessage.trim();
    
    try {
      const messageData = {
        from_user_id: currentUser.id,
        to_user_id: selectedUser.id,
        message: messageText
      };

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const tempMessage = {
        id: Date.now(), // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
        sender_id: currentUser.id,
        receiver_id: selectedUser.id,
        content: messageText,
        sender_name: currentUser.username || '–í—ã',
        created_at: new Date().toISOString()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
      setMessages(prevMessages => {
        const updatedMessages = [...prevMessages, tempMessage];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
        const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
        localStorage.setItem(savedMessagesKey, JSON.stringify(updatedMessages));
        
        return updatedMessages;
      });
      setNewMessage('');
      setShowEmojiPicker(false);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await axios.post('/api/chat', messageData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      if (response.data && response.data.data) {
        const serverMessage = {
          ...response.data.data,
          content: response.data.data.message || response.data.data.content,
          created_at: response.data.data.created_date || new Date().toISOString(),
          sender_name: response.data.data.from_username || currentUser.username,
          sender_id: response.data.data.from_user_id,
          receiver_id: response.data.data.to_user_id
        };
        
        setMessages(prevMessages => {
          const updatedMessages = prevMessages.map(msg => 
            msg.id === tempMessage.id ? serverMessage : msg
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ localStorage
          const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
          localStorage.setItem(savedMessagesKey, JSON.stringify(updatedMessages));
          
          return updatedMessages;
        });
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setMessages(prevMessages => {
        const updatedMessages = prevMessages.filter(msg => msg.id !== tempMessage?.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const savedMessagesKey = `chat_messages_${currentUser.id}_${selectedUser.id}`;
        localStorage.setItem(savedMessagesKey, JSON.stringify(updatedMessages));
        
        return updatedMessages;
      });
      setNewMessage(messageText); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  };

  const selectUser = (user) => {
    setSelectedUser(user);
    setShowUserList(false);
  };

  const addEmoji = (emoji) => {
    setNewMessage(prev => prev + emoji);
    setShowEmojiPicker(false);
  };

  const getUserIcon = (role) => {
    switch (role) {
      case 'admin':
        return <FaUserShield className="text-accent-blue" />;
      case 'executor':
        return <FaUserCog className="text-gray-600" />;
      default:
        return <FaUser className="text-gray-500" />;
    }
  };

  const getRoleLabel = (role) => {
    const roleMap = {
      'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      'executor': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
      'buyer': '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å'
    };
    return roleMap[role] || role;
  };

  const formatTime = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="chat-wrapper">
      <div className="chat-header">
        <h1 className="chat-title">
          {isAdmin ? '–ß–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏' : '–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'}
        </h1>
        
        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        {isAdmin && (
          <button
            className="mobile-users-btn"
            onClick={() => setShowUserList(!showUserList)}
          >
            {showUserList ? <FaTimes /> : <FaBars />}
          </button>
        )}
      </div>

      <div className="chat-container">
        {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        {isAdmin && (
          <div className={`users-panel ${showUserList ? 'mobile-users-open' : ''}`}>
            <div className="users-header">
              <h2 className="users-title">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
            </div>
            <div className="users-list">
              {users.length === 0 ? (
                <div className="no-users">
                  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </div>
              ) : (
                <div className="users-scroll">
                  {users.map((user) => (
                    <div
                      key={user.id}
                      className={`user-item ${
                        selectedUser?.id === user.id ? 'user-selected' : ''
                      }`}
                      onClick={() => selectUser(user)}
                    >
                      <div className="user-content">
                        {user.avatar ? (
                          <img
                            src={user.avatar}
                            alt={user.username}
                            className="user-avatar"
                          />
                        ) : (
                          <div className="user-avatar-placeholder">
                            {getUserIcon(user.role)}
                          </div>
                        )}
                        <div className="user-info">
                          <div className="user-name">{user.username}</div>
                          <div className="user-details">
                            ID: {user.id} ‚Ä¢ {getRoleLabel(user.role)}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        <div className="chat-main">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
          <div className="chat-user-header">
            {selectedUser ? (
              <div className="selected-user-info">
                <div className="selected-user-avatar">
                  {getUserIcon(selectedUser.role)}
                </div>
                <div className="selected-user-details">
                  <h2 className="selected-user-name">{selectedUser.username}</h2>
                  <div className="selected-user-role">
                    {getRoleLabel(selectedUser.role)}
                  </div>
                </div>
              </div>
            ) : (
              <h2 className="no-user-selected">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
            )}
          </div>

          {selectedUser && (
            <div className="chat-content">
              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="messages-container">
                {loading ? (
                  <div className="loading-state">
                    <div className="loading-spinner"></div>
                    <p className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
                  </div>
                ) : (
                  <div className="messages-list">
                    {messages.length === 0 ? (
                      <div className="empty-messages">
                        <i className="fas fa-comment-dots empty-icon"></i>
                        <p className="empty-text">
                          {isAdmin ? '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!'}
                        </p>
                        <small className="empty-subtext">
                          {isAdmin ? '–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è'}
                        </small>
                      </div>
                    ) : (
                      messages.map((message) => {
                        if (!message || typeof message !== 'object') {
                          console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
                          return null;
                        }
                        
                        const messageId = message.id || `msg-${Math.random()}`;
                        const senderId = message.sender_id || message.from_user_id || 0;
                        const messageText = message.content || message.message || '';
                        const senderName = message.sender_name || message.from_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                        const createdAt = message.created_at || message.created_date || new Date().toISOString();
                        const isFromCurrentUser = senderId === currentUser.id;
                        
                        return (
                          <div key={messageId} className={`message ${isFromCurrentUser ? 'message-sent' : 'message-received'}`}>
                            <div className="message-avatar">
                              {isFromCurrentUser ? (
                                currentUser.username?.charAt(0).toUpperCase() || 'U'
                              ) : (
                                isAdmin ? (selectedUser?.username?.charAt(0).toUpperCase() || '?') : 'A'
                              )}
                            </div>
                            <div className="message-content">
                              <div className="message-text">{messageText}</div>
                              <div className="message-time">
                                {formatTime(createdAt)}
                              </div>
                            </div>
                          </div>
                        );
                      })
                    )}
                    <div ref={messagesEndRef} />
                  </div>
                )}
              </div>

              {/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="message-input-container">
                <form onSubmit={sendMessage} className="message-form">
                  <div className="input-wrapper">
                    <textarea
                      className="message-input"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      rows={2}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && !e.shiftKey) {
                          e.preventDefault();
                          sendMessage(e);
                        }
                      }}
                    />
                    
                    {/* –ö–Ω–æ–ø–∫–∞ —ç–º–æ–¥–∑–∏ */}
                    <button
                      type="button"
                      className="emoji-btn"
                      onClick={() => setShowEmojiPicker(!showEmojiPicker)}
                    >
                      <FaSmile />
                    </button>

                    {/* –ü–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ */}
                    {showEmojiPicker && (
                      <div className="emoji-picker">
                        {emojis.map((emoji, index) => (
                          <button
                            key={index}
                            type="button"
                            className="emoji-item"
                            onClick={() => addEmoji(emoji)}
                          >
                            {emoji}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  <button
                    type="submit"
                    className="send-btn"
                    disabled={!newMessage.trim()}
                  >
                    <FaPaperPlane />
                  </button>
                </form>
              </div>
            </div>
          )}

          {!selectedUser && !isAdmin && (
            <div className="no-chat-state">
              <FaUser className="no-chat-icon" />
              <p className="no-chat-text">
                –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>
          )}
        </div>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–∫—Ä—ã—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      {selectedUser && (
        <div className="quick-phrases">
          <div className="quick-phrases-title">–ë—ã—Å—Ç—Ä—ã–µ —Ñ—Ä–∞–∑—ã:</div>
          <div className="quick-phrases-list">
            {[
              '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!',
              '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å',
              '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É',
              '–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ?',
              '–í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ'
            ].map((phrase, index) => (
              <button
                key={index}
                className="quick-phrase-btn"
                onClick={() => setNewMessage(phrase)}
              >
                {phrase}
              </button>
            ))}
          </div>
        </div>
      )}

      <style jsx>{`
        .chat-wrapper {
          display: flex;
          flex-direction: column;
          height: calc(100vh - 100px);
          max-width: 1200px;
          margin: 0 auto;
          padding: 1rem;
        }

        .chat-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 1rem;
          padding: 0 0.5rem;
        }

        .chat-title {
          font-size: 1.5rem;
          font-weight: bold;
          color: #000;
          margin: 0;
        }

        .mobile-users-btn {
          display: none;
          background: var(--accent-blue);
          color: white;
          border: none;
          padding: 0.5rem;
          border-radius: 0.25rem;
          cursor: pointer;
        }

        .chat-container {
          display: grid;
          grid-template-columns: 300px 1fr;
          gap: 1rem;
          height: 100%;
          background: white;
          border-radius: 0.5rem;
          overflow: hidden;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .users-panel {
          border-right: 1px solid #e0e0e0;
          display: flex;
          flex-direction: column;
          background: #f9f9f9;
        }

        .users-header {
          padding: 1rem;
          border-bottom: 1px solid #e0e0e0;
          background: white;
        }

        .users-title {
          font-size: 1.125rem;
          font-weight: 600;
          margin: 0;
          color: #000;
        }

        .users-list {
          flex: 1;
          overflow: hidden;
        }

        .no-users {
          padding: 2rem 1rem;
          text-align: center;
          color: #666;
        }

        .users-scroll {
          height: 100%;
          overflow-y: auto;
        }

        .user-item {
          padding: 1rem;
          border-bottom: 1px solid #e0e0e0;
          cursor: pointer;
          transition: background-color 0.2s;
          background: white;
        }

        .user-item:hover {
          background-color: #f0f0f0;
        }

        .user-selected {
          background-color: rgba(26, 54, 93, 0.1) !important;
          border-left: 4px solid var(--accent-blue);
        }

        .user-content {
          display: flex;
          gap: 0.75rem;
          align-items: center;
        }

        .user-avatar, .user-avatar-placeholder {
          width: 2.5rem;
          height: 2.5rem;
          border-radius: 50%;
          object-fit: cover;
          display: flex;
          align-items: center;
          justify-content: center;
          background: #e0e0e0;
        }

        .user-info {
          flex: 1;
        }

        .user-name {
          font-weight: 500;
          color: #000;
          margin-bottom: 0.25rem;
        }

        .user-details {
          font-size: 0.875rem;
          color: #666;
        }

        .chat-main {
          display: flex;
          flex-direction: column;
          height: 100%;
        }

        .chat-user-header {
          padding: 1rem;
          border-bottom: 1px solid #e0e0e0;
          background: white;
        }

        .selected-user-info {
          display: flex;
          gap: 0.75rem;
          align-items: center;
        }

        .selected-user-avatar {
          width: 2rem;
          height: 2rem;
          border-radius: 50%;
          background: #e0e0e0;
          display: flex;
          align-items: center;
          justify-content: center;
        }

        .selected-user-name {
          font-size: 1.125rem;
          font-weight: 600;
          margin: 0;
          color: #000;
        }

        .selected-user-role {
          font-size: 0.875rem;
          color: #666;
        }

        .no-user-selected {
          font-size: 1.125rem;
          font-weight: 600;
          margin: 0;
          color: #666;
        }

        .chat-content {
          display: flex;
          flex-direction: column;
          flex: 1;
        }

        .messages-container {
          flex: 1;
          overflow-y: auto;
          padding: 1rem;
          background: #f9f9f9;
        }

        .loading-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
        }

        .loading-spinner {
          width: 2rem;
          height: 2rem;
          border: 3px solid #e0e0e0;
          border-top: 3px solid var(--accent-blue);
          border-radius: 50%;
          animation: spin 1s linear infinite;
          margin-bottom: 1rem;
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .loading-text {
          color: #666;
          margin: 0;
        }

        .messages-list {
          display: flex;
          flex-direction: column;
          gap: 0.75rem;
        }

        .empty-messages {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          text-align: center;
          padding: 2rem;
        }

        .empty-icon {
          font-size: 3rem;
          color: #ddd;
          margin-bottom: 1rem;
        }

        .empty-text {
          color: #666;
          margin: 0 0 0.5rem 0;
        }

        .empty-subtext {
          color: #999;
          font-size: 0.875rem;
        }

        .message {
          display: flex;
          gap: 0.5rem;
          align-items: flex-start;
          max-width: 70%;
        }

        .message-sent {
          margin-left: auto;
          flex-direction: row-reverse;
        }

        .message-received {
          margin-right: auto;
        }

        .message-avatar {
          width: 2rem;
          height: 2rem;
          border-radius: 50%;
          background: var(--accent-blue);
          color: white;
          display: flex;
          align-items: center;
          justify-content: center;
          font-size: 0.75rem;
          font-weight: bold;
          flex-shrink: 0;
        }

        .message-content {
          background: white;
          padding: 0.75rem;
          border-radius: 1rem;
          box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .message-sent .message-content {
          background: var(--accent-blue);
          color: white;
        }

        .message-text {
          margin-bottom: 0.25rem;
          word-wrap: break-word;
        }

        .message-time {
          font-size: 0.75rem;
          opacity: 0.7;
        }

        .message-input-container {
          padding: 1rem;
          background: white;
          border-top: 1px solid #e0e0e0;
        }

        .message-form {
          display: flex;
          gap: 0.5rem;
          align-items: flex-end;
        }

        .input-wrapper {
          position: relative;
          flex: 1;
        }

        .message-input {
          width: 100%;
          padding: 0.75rem;
          border: 1px solid #ddd;
          border-radius: 1rem;
          resize: none;
          outline: none;
          font-family: inherit;
        }

        .message-input:focus {
          border-color: var(--accent-blue);
        }

        .emoji-btn {
          position: absolute;
          bottom: 0.5rem;
          right: 0.5rem;
          background: none;
          border: none;
          color: #666;
          cursor: pointer;
          padding: 0.25rem;
          border-radius: 50%;
          transition: background-color 0.2s;
        }

        .emoji-btn:hover {
          background: #f0f0f0;
        }

        .emoji-picker {
          position: absolute;
          bottom: 100%;
          right: 0;
          background: white;
          border: 1px solid #ddd;
          border-radius: 0.5rem;
          padding: 0.5rem;
          display: grid;
          grid-template-columns: repeat(6, 1fr);
          gap: 0.25rem;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .emoji-item {
          background: none;
          border: none;
          font-size: 1.25rem;
          padding: 0.25rem;
          cursor: pointer;
          border-radius: 0.25rem;
          transition: background-color 0.2s;
        }

        .emoji-item:hover {
          background: #f0f0f0;
        }

        .send-btn {
          background: var(--accent-blue);
          color: white;
          border: none;
          padding: 0.75rem;
          border-radius: 50%;
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: background-color 0.2s;
          min-width: 3rem;
          height: 3rem;
        }

        .send-btn:hover:not(:disabled) {
          background: var(--accent-blue-hover);
        }

        .send-btn:disabled {
          background: #ccc;
          cursor: not-allowed;
        }

        .no-chat-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          height: 100%;
          padding: 2rem;
          text-align: center;
        }

        .no-chat-icon {
          font-size: 4rem;
          color: #ddd;
          margin-bottom: 1rem;
        }

        .no-chat-text {
          color: #666;
          margin: 0;
        }

        .quick-phrases {
          margin-top: 1rem;
          padding: 1rem;
          background: #f9f9f9;
          border-radius: 0.5rem;
        }

        .quick-phrases-title {
          font-size: 0.875rem;
          color: #666;
          margin-bottom: 0.5rem;
        }

        .quick-phrases-list {
          display: flex;
          flex-wrap: wrap;
          gap: 0.5rem;
        }

        .quick-phrase-btn {
          background: white;
          border: 1px solid #ddd;
          padding: 0.25rem 0.75rem;
          border-radius: 1rem;
          font-size: 0.75rem;
          cursor: pointer;
          transition: all 0.2s;
        }

        .quick-phrase-btn:hover {
          background: #f0f0f0;
          border-color: var(--accent-blue);
        }

        /* –ú–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        @media (max-width: 768px) {
          .chat-wrapper {
            padding: 0.5rem;
            height: calc(100vh - 60px);
          }

          .chat-header {
            margin-bottom: 0.5rem;
          }

          .chat-title {
            font-size: 1.125rem;
          }

          .mobile-users-btn {
            display: flex;
            align-items: center;
            justify-content: center;
          }

          .chat-container {
            grid-template-columns: 1fr;
            position: relative;
          }

          .users-panel {
            position: absolute;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
            transform: translateX(-100%);
            transition: transform 0.3s ease;
            border-right: none;
          }

          .mobile-users-open {
            transform: translateX(0);
          }

          .users-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
          }

          .message {
            max-width: 85%;
          }

          .message-avatar {
            width: 1.75rem;
            height: 1.75rem;
            font-size: 0.625rem;
          }

          .message-content {
            padding: 0.5rem 0.75rem;
          }

          .message-text {
            font-size: 0.875rem;
          }

          .message-time {
            font-size: 0.6875rem;
          }

          .message-input-container {
            padding: 0.75rem;
          }

          .message-input {
            padding: 0.5rem 2.5rem 0.5rem 0.75rem;
            font-size: 1rem;
          }

          .send-btn {
            min-width: 2.5rem;
            height: 2.5rem;
            padding: 0.5rem;
          }

          .quick-phrases {
            display: none;
          }

          .emoji-picker {
            grid-template-columns: repeat(4, 1fr);
            left: 50%;
            transform: translateX(-50%);
            right: auto;
          }

          .selected-user-name {
            font-size: 1rem;
          }

          .users-title {
            font-size: 1rem;
          }

          .user-item {
            padding: 0.75rem;
          }

          .user-avatar,
          .user-avatar-placeholder {
            width: 2rem;
            height: 2rem;
          }

          .user-name {
            font-size: 0.875rem;
          }

          .user-details {
            font-size: 0.75rem;
          }
        }

        @media (max-width: 480px) {
          .chat-wrapper {
            padding: 0.25rem;
          }

          .chat-title {
            font-size: 1rem;
          }

          .message {
            max-width: 90%;
          }

          .message-content {
            padding: 0.5rem;
          }

          .message-input {
            font-size: 16px; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑—É–º –Ω–∞ iOS */
          }

          .emoji-picker {
            grid-template-columns: repeat(3, 1fr);
          }
        }

        /* –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ CSS */
        :root {
          --accent-blue: #1a365d;
          --accent-blue-hover: #2c5282;
        }
      `}</style>
    </div>
  );
};

export default Chat;